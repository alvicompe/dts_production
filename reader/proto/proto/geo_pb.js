// source: proto/geo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_material_pb = require('../proto/material_pb.js');
goog.object.extend(proto, proto_material_pb);
var proto_geofence_pb = require('../proto/geofence_pb.js');
goog.object.extend(proto, proto_geofence_pb);
var proto_road_pb = require('../proto/road_pb.js');
goog.object.extend(proto, proto_road_pb);
var proto_pit_pb = require('../proto/pit_pb.js');
goog.object.extend(proto, proto_pit_pb);
var proto_pad_pb = require('../proto/pad_pb.js');
goog.object.extend(proto, proto_pad_pb);
var proto_dme_pb = require('../proto/dme_pb.js');
goog.object.extend(proto, proto_dme_pb);
var proto_stock_pb = require('../proto/stock_pb.js');
goog.object.extend(proto, proto_stock_pb);
goog.exportSymbol('proto.pb.Chunk', null, global);
goog.exportSymbol('proto.pb.Geo', null, global);
goog.exportSymbol('proto.pb.GeoChunkRequest', null, global);
goog.exportSymbol('proto.pb.GeoChunkResponse', null, global);
goog.exportSymbol('proto.pb.GeoEmptyRequest', null, global);
goog.exportSymbol('proto.pb.GeoRequest', null, global);
goog.exportSymbol('proto.pb.GeoResponse', null, global);
goog.exportSymbol('proto.pb.GeosResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Geo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Geo.repeatedFields_, null);
};
goog.inherits(proto.pb.Geo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Geo.displayName = 'proto.pb.Geo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Chunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Chunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Chunk.displayName = 'proto.pb.Chunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GeoChunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GeoChunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GeoChunkRequest.displayName = 'proto.pb.GeoChunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GeoChunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GeoChunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GeoChunkResponse.displayName = 'proto.pb.GeoChunkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GeoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GeoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GeoRequest.displayName = 'proto.pb.GeoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GeoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GeoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GeoResponse.displayName = 'proto.pb.GeoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GeosResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.GeosResponse.repeatedFields_, null);
};
goog.inherits(proto.pb.GeosResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GeosResponse.displayName = 'proto.pb.GeosResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GeoEmptyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GeoEmptyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GeoEmptyRequest.displayName = 'proto.pb.GeoEmptyRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Geo.repeatedFields_ = [4,5,6,7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Geo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Geo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Geo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Geo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    materialList: jspb.Message.toObjectList(msg.getMaterialList(),
    proto_material_pb.Material.toObject, includeInstance),
    geofenceList: jspb.Message.toObjectList(msg.getGeofenceList(),
    proto_geofence_pb.Geofence.toObject, includeInstance),
    roadList: jspb.Message.toObjectList(msg.getRoadList(),
    proto_road_pb.Road.toObject, includeInstance),
    pitList: jspb.Message.toObjectList(msg.getPitList(),
    proto_pit_pb.Pit.toObject, includeInstance),
    padList: jspb.Message.toObjectList(msg.getPadList(),
    proto_pad_pb.Pad.toObject, includeInstance),
    dmeList: jspb.Message.toObjectList(msg.getDmeList(),
    proto_dme_pb.Dme.toObject, includeInstance),
    stockList: jspb.Message.toObjectList(msg.getStockList(),
    proto_stock_pb.Stock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Geo}
 */
proto.pb.Geo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Geo;
  return proto.pb.Geo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Geo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Geo}
 */
proto.pb.Geo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto_material_pb.Material;
      reader.readMessage(value,proto_material_pb.Material.deserializeBinaryFromReader);
      msg.addMaterial(value);
      break;
    case 5:
      var value = new proto_geofence_pb.Geofence;
      reader.readMessage(value,proto_geofence_pb.Geofence.deserializeBinaryFromReader);
      msg.addGeofence(value);
      break;
    case 6:
      var value = new proto_road_pb.Road;
      reader.readMessage(value,proto_road_pb.Road.deserializeBinaryFromReader);
      msg.addRoad(value);
      break;
    case 7:
      var value = new proto_pit_pb.Pit;
      reader.readMessage(value,proto_pit_pb.Pit.deserializeBinaryFromReader);
      msg.addPit(value);
      break;
    case 8:
      var value = new proto_pad_pb.Pad;
      reader.readMessage(value,proto_pad_pb.Pad.deserializeBinaryFromReader);
      msg.addPad(value);
      break;
    case 9:
      var value = new proto_dme_pb.Dme;
      reader.readMessage(value,proto_dme_pb.Dme.deserializeBinaryFromReader);
      msg.addDme(value);
      break;
    case 10:
      var value = new proto_stock_pb.Stock;
      reader.readMessage(value,proto_stock_pb.Stock.deserializeBinaryFromReader);
      msg.addStock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Geo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Geo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Geo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Geo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMaterialList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto_material_pb.Material.serializeBinaryToWriter
    );
  }
  f = message.getGeofenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto_geofence_pb.Geofence.serializeBinaryToWriter
    );
  }
  f = message.getRoadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto_road_pb.Road.serializeBinaryToWriter
    );
  }
  f = message.getPitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto_pit_pb.Pit.serializeBinaryToWriter
    );
  }
  f = message.getPadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto_pad_pb.Pad.serializeBinaryToWriter
    );
  }
  f = message.getDmeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto_dme_pb.Dme.serializeBinaryToWriter
    );
  }
  f = message.getStockList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto_stock_pb.Stock.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.Geo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.Geo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.pb.Geo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Material material = 4;
 * @return {!Array<!proto.pb.Material>}
 */
proto.pb.Geo.prototype.getMaterialList = function() {
  return /** @type{!Array<!proto.pb.Material>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_material_pb.Material, 4));
};


/**
 * @param {!Array<!proto.pb.Material>} value
 * @return {!proto.pb.Geo} returns this
*/
proto.pb.Geo.prototype.setMaterialList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.Material=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Material}
 */
proto.pb.Geo.prototype.addMaterial = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.Material, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.clearMaterialList = function() {
  return this.setMaterialList([]);
};


/**
 * repeated Geofence geofence = 5;
 * @return {!Array<!proto.pb.Geofence>}
 */
proto.pb.Geo.prototype.getGeofenceList = function() {
  return /** @type{!Array<!proto.pb.Geofence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_geofence_pb.Geofence, 5));
};


/**
 * @param {!Array<!proto.pb.Geofence>} value
 * @return {!proto.pb.Geo} returns this
*/
proto.pb.Geo.prototype.setGeofenceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pb.Geofence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Geofence}
 */
proto.pb.Geo.prototype.addGeofence = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pb.Geofence, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.clearGeofenceList = function() {
  return this.setGeofenceList([]);
};


/**
 * repeated Road road = 6;
 * @return {!Array<!proto.pb.Road>}
 */
proto.pb.Geo.prototype.getRoadList = function() {
  return /** @type{!Array<!proto.pb.Road>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_road_pb.Road, 6));
};


/**
 * @param {!Array<!proto.pb.Road>} value
 * @return {!proto.pb.Geo} returns this
*/
proto.pb.Geo.prototype.setRoadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pb.Road=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Road}
 */
proto.pb.Geo.prototype.addRoad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pb.Road, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.clearRoadList = function() {
  return this.setRoadList([]);
};


/**
 * repeated Pit pit = 7;
 * @return {!Array<!proto.pb.Pit>}
 */
proto.pb.Geo.prototype.getPitList = function() {
  return /** @type{!Array<!proto.pb.Pit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_pit_pb.Pit, 7));
};


/**
 * @param {!Array<!proto.pb.Pit>} value
 * @return {!proto.pb.Geo} returns this
*/
proto.pb.Geo.prototype.setPitList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.pb.Pit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Pit}
 */
proto.pb.Geo.prototype.addPit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.pb.Pit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.clearPitList = function() {
  return this.setPitList([]);
};


/**
 * repeated Pad pad = 8;
 * @return {!Array<!proto.pb.Pad>}
 */
proto.pb.Geo.prototype.getPadList = function() {
  return /** @type{!Array<!proto.pb.Pad>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_pad_pb.Pad, 8));
};


/**
 * @param {!Array<!proto.pb.Pad>} value
 * @return {!proto.pb.Geo} returns this
*/
proto.pb.Geo.prototype.setPadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.pb.Pad=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Pad}
 */
proto.pb.Geo.prototype.addPad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.pb.Pad, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.clearPadList = function() {
  return this.setPadList([]);
};


/**
 * repeated Dme dme = 9;
 * @return {!Array<!proto.pb.Dme>}
 */
proto.pb.Geo.prototype.getDmeList = function() {
  return /** @type{!Array<!proto.pb.Dme>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_dme_pb.Dme, 9));
};


/**
 * @param {!Array<!proto.pb.Dme>} value
 * @return {!proto.pb.Geo} returns this
*/
proto.pb.Geo.prototype.setDmeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.pb.Dme=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Dme}
 */
proto.pb.Geo.prototype.addDme = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.pb.Dme, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.clearDmeList = function() {
  return this.setDmeList([]);
};


/**
 * repeated Stock stock = 10;
 * @return {!Array<!proto.pb.Stock>}
 */
proto.pb.Geo.prototype.getStockList = function() {
  return /** @type{!Array<!proto.pb.Stock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_stock_pb.Stock, 10));
};


/**
 * @param {!Array<!proto.pb.Stock>} value
 * @return {!proto.pb.Geo} returns this
*/
proto.pb.Geo.prototype.setStockList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pb.Stock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Stock}
 */
proto.pb.Geo.prototype.addStock = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.Stock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Geo} returns this
 */
proto.pb.Geo.prototype.clearStockList = function() {
  return this.setStockList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Chunk.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Chunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Chunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Chunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Chunk}
 */
proto.pb.Chunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Chunk;
  return proto.pb.Chunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Chunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Chunk}
 */
proto.pb.Chunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Chunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Chunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Chunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Chunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pb.Chunk.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.pb.Chunk.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.pb.Chunk.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pb.Chunk} returns this
 */
proto.pb.Chunk.prototype.setContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GeoChunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GeoChunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GeoChunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoChunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunk: (f = msg.getChunk()) && proto.pb.Chunk.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GeoChunkRequest}
 */
proto.pb.GeoChunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GeoChunkRequest;
  return proto.pb.GeoChunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GeoChunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GeoChunkRequest}
 */
proto.pb.GeoChunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Chunk;
      reader.readMessage(value,proto.pb.Chunk.deserializeBinaryFromReader);
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GeoChunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GeoChunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GeoChunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoChunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunk();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Chunk.serializeBinaryToWriter
    );
  }
};


/**
 * optional Chunk chunk = 1;
 * @return {?proto.pb.Chunk}
 */
proto.pb.GeoChunkRequest.prototype.getChunk = function() {
  return /** @type{?proto.pb.Chunk} */ (
    jspb.Message.getWrapperField(this, proto.pb.Chunk, 1));
};


/**
 * @param {?proto.pb.Chunk|undefined} value
 * @return {!proto.pb.GeoChunkRequest} returns this
*/
proto.pb.GeoChunkRequest.prototype.setChunk = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.GeoChunkRequest} returns this
 */
proto.pb.GeoChunkRequest.prototype.clearChunk = function() {
  return this.setChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.GeoChunkRequest.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GeoChunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GeoChunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GeoChunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoChunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GeoChunkResponse}
 */
proto.pb.GeoChunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GeoChunkResponse;
  return proto.pb.GeoChunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GeoChunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GeoChunkResponse}
 */
proto.pb.GeoChunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GeoChunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GeoChunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GeoChunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoChunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.pb.GeoChunkResponse.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.GeoChunkResponse} returns this
 */
proto.pb.GeoChunkResponse.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GeoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GeoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GeoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    geo: (f = msg.getGeo()) && proto.pb.Geo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GeoRequest}
 */
proto.pb.GeoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GeoRequest;
  return proto.pb.GeoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GeoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GeoRequest}
 */
proto.pb.GeoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Geo;
      reader.readMessage(value,proto.pb.Geo.deserializeBinaryFromReader);
      msg.setGeo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GeoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GeoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GeoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Geo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Geo geo = 1;
 * @return {?proto.pb.Geo}
 */
proto.pb.GeoRequest.prototype.getGeo = function() {
  return /** @type{?proto.pb.Geo} */ (
    jspb.Message.getWrapperField(this, proto.pb.Geo, 1));
};


/**
 * @param {?proto.pb.Geo|undefined} value
 * @return {!proto.pb.GeoRequest} returns this
*/
proto.pb.GeoRequest.prototype.setGeo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.GeoRequest} returns this
 */
proto.pb.GeoRequest.prototype.clearGeo = function() {
  return this.setGeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.GeoRequest.prototype.hasGeo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GeoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GeoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GeoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    geo: (f = msg.getGeo()) && proto.pb.Geo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GeoResponse}
 */
proto.pb.GeoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GeoResponse;
  return proto.pb.GeoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GeoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GeoResponse}
 */
proto.pb.GeoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Geo;
      reader.readMessage(value,proto.pb.Geo.deserializeBinaryFromReader);
      msg.setGeo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GeoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GeoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GeoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.Geo.serializeBinaryToWriter
    );
  }
};


/**
 * optional Geo geo = 1;
 * @return {?proto.pb.Geo}
 */
proto.pb.GeoResponse.prototype.getGeo = function() {
  return /** @type{?proto.pb.Geo} */ (
    jspb.Message.getWrapperField(this, proto.pb.Geo, 1));
};


/**
 * @param {?proto.pb.Geo|undefined} value
 * @return {!proto.pb.GeoResponse} returns this
*/
proto.pb.GeoResponse.prototype.setGeo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.GeoResponse} returns this
 */
proto.pb.GeoResponse.prototype.clearGeo = function() {
  return this.setGeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.GeoResponse.prototype.hasGeo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.GeosResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GeosResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GeosResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GeosResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeosResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    geosList: jspb.Message.toObjectList(msg.getGeosList(),
    proto.pb.Geo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GeosResponse}
 */
proto.pb.GeosResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GeosResponse;
  return proto.pb.GeosResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GeosResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GeosResponse}
 */
proto.pb.GeosResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Geo;
      reader.readMessage(value,proto.pb.Geo.deserializeBinaryFromReader);
      msg.addGeos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GeosResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GeosResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GeosResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeosResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.Geo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Geo geos = 1;
 * @return {!Array<!proto.pb.Geo>}
 */
proto.pb.GeosResponse.prototype.getGeosList = function() {
  return /** @type{!Array<!proto.pb.Geo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Geo, 1));
};


/**
 * @param {!Array<!proto.pb.Geo>} value
 * @return {!proto.pb.GeosResponse} returns this
*/
proto.pb.GeosResponse.prototype.setGeosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.Geo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Geo}
 */
proto.pb.GeosResponse.prototype.addGeos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Geo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.GeosResponse} returns this
 */
proto.pb.GeosResponse.prototype.clearGeosList = function() {
  return this.setGeosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GeoEmptyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GeoEmptyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GeoEmptyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoEmptyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GeoEmptyRequest}
 */
proto.pb.GeoEmptyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GeoEmptyRequest;
  return proto.pb.GeoEmptyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GeoEmptyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GeoEmptyRequest}
 */
proto.pb.GeoEmptyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GeoEmptyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GeoEmptyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GeoEmptyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GeoEmptyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.pb);
