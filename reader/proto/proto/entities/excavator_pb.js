// source: proto/entities/excavator.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_entities_contractor_pb = require('../../proto/entities/contractor_pb.js');
goog.object.extend(proto, proto_entities_contractor_pb);
var proto_entities_sensor_pb = require('../../proto/entities/sensor_pb.js');
goog.object.extend(proto, proto_entities_sensor_pb);
var proto_entities_load_pb = require('../../proto/entities/load_pb.js');
goog.object.extend(proto, proto_entities_load_pb);
goog.exportSymbol('proto.pb.Excavator', null, global);
goog.exportSymbol('proto.pb.OperationAssignmentExcavator', null, global);
goog.exportSymbol('proto.pb.OperationAssignmentExcavator.Shift', null, global);
goog.exportSymbol('proto.pb.OperationAssignmentExcavator.State', null, global);
goog.exportSymbol('proto.pb.TruckTemporal', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TruckTemporal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TruckTemporal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TruckTemporal.displayName = 'proto.pb.TruckTemporal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.OperationAssignmentExcavator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.OperationAssignmentExcavator.repeatedFields_, null);
};
goog.inherits(proto.pb.OperationAssignmentExcavator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.OperationAssignmentExcavator.displayName = 'proto.pb.OperationAssignmentExcavator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Excavator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Excavator.repeatedFields_, null);
};
goog.inherits(proto.pb.Excavator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Excavator.displayName = 'proto.pb.Excavator';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TruckTemporal.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TruckTemporal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TruckTemporal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TruckTemporal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceAlias: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TruckTemporal}
 */
proto.pb.TruckTemporal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TruckTemporal;
  return proto.pb.TruckTemporal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TruckTemporal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TruckTemporal}
 */
proto.pb.TruckTemporal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TruckTemporal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TruckTemporal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TruckTemporal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TruckTemporal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceAlias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.TruckTemporal.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TruckTemporal} returns this
 */
proto.pb.TruckTemporal.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.pb.TruckTemporal.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TruckTemporal} returns this
 */
proto.pb.TruckTemporal.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_alias = 3;
 * @return {string}
 */
proto.pb.TruckTemporal.prototype.getDeviceAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TruckTemporal} returns this
 */
proto.pb.TruckTemporal.prototype.setDeviceAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.OperationAssignmentExcavator.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.OperationAssignmentExcavator.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.OperationAssignmentExcavator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.OperationAssignmentExcavator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.OperationAssignmentExcavator.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    excavator: (f = msg.getExcavator()) && proto.pb.Excavator.toObject(includeInstance, f),
    truckList: jspb.Message.toObjectList(msg.getTruckList(),
    proto.pb.TruckTemporal.toObject, includeInstance),
    upload: (f = msg.getUpload()) && proto_entities_load_pb.Upload.toObject(includeInstance, f),
    download: (f = msg.getDownload()) && proto_entities_load_pb.Download.toObject(includeInstance, f),
    shift: jspb.Message.getFieldWithDefault(msg, 6, 0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.OperationAssignmentExcavator}
 */
proto.pb.OperationAssignmentExcavator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.OperationAssignmentExcavator;
  return proto.pb.OperationAssignmentExcavator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.OperationAssignmentExcavator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.OperationAssignmentExcavator}
 */
proto.pb.OperationAssignmentExcavator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.pb.Excavator;
      reader.readMessage(value,proto.pb.Excavator.deserializeBinaryFromReader);
      msg.setExcavator(value);
      break;
    case 3:
      var value = new proto.pb.TruckTemporal;
      reader.readMessage(value,proto.pb.TruckTemporal.deserializeBinaryFromReader);
      msg.addTruck(value);
      break;
    case 4:
      var value = new proto_entities_load_pb.Upload;
      reader.readMessage(value,proto_entities_load_pb.Upload.deserializeBinaryFromReader);
      msg.setUpload(value);
      break;
    case 5:
      var value = new proto_entities_load_pb.Download;
      reader.readMessage(value,proto_entities_load_pb.Download.deserializeBinaryFromReader);
      msg.setDownload(value);
      break;
    case 6:
      var value = /** @type {!proto.pb.OperationAssignmentExcavator.Shift} */ (reader.readEnum());
      msg.setShift(value);
      break;
    case 7:
      var value = /** @type {!proto.pb.OperationAssignmentExcavator.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.OperationAssignmentExcavator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.OperationAssignmentExcavator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.OperationAssignmentExcavator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.OperationAssignmentExcavator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExcavator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Excavator.serializeBinaryToWriter
    );
  }
  f = message.getTruckList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pb.TruckTemporal.serializeBinaryToWriter
    );
  }
  f = message.getUpload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_entities_load_pb.Upload.serializeBinaryToWriter
    );
  }
  f = message.getDownload();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto_entities_load_pb.Download.serializeBinaryToWriter
    );
  }
  f = message.getShift();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.OperationAssignmentExcavator.Shift = {
  UNKNOWN_SHIFT: 0,
  NIGHT: 1,
  DAY: 2
};

/**
 * @enum {number}
 */
proto.pb.OperationAssignmentExcavator.State = {
  UNKNOWN_STATE: 0,
  PENDING: 1,
  OPENED: 2,
  CLOSED: 3
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.OperationAssignmentExcavator.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
 */
proto.pb.OperationAssignmentExcavator.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Excavator excavator = 2;
 * @return {?proto.pb.Excavator}
 */
proto.pb.OperationAssignmentExcavator.prototype.getExcavator = function() {
  return /** @type{?proto.pb.Excavator} */ (
    jspb.Message.getWrapperField(this, proto.pb.Excavator, 2));
};


/**
 * @param {?proto.pb.Excavator|undefined} value
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
*/
proto.pb.OperationAssignmentExcavator.prototype.setExcavator = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
 */
proto.pb.OperationAssignmentExcavator.prototype.clearExcavator = function() {
  return this.setExcavator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.OperationAssignmentExcavator.prototype.hasExcavator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TruckTemporal truck = 3;
 * @return {!Array<!proto.pb.TruckTemporal>}
 */
proto.pb.OperationAssignmentExcavator.prototype.getTruckList = function() {
  return /** @type{!Array<!proto.pb.TruckTemporal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.TruckTemporal, 3));
};


/**
 * @param {!Array<!proto.pb.TruckTemporal>} value
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
*/
proto.pb.OperationAssignmentExcavator.prototype.setTruckList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pb.TruckTemporal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.TruckTemporal}
 */
proto.pb.OperationAssignmentExcavator.prototype.addTruck = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.TruckTemporal, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
 */
proto.pb.OperationAssignmentExcavator.prototype.clearTruckList = function() {
  return this.setTruckList([]);
};


/**
 * optional Upload upload = 4;
 * @return {?proto.pb.Upload}
 */
proto.pb.OperationAssignmentExcavator.prototype.getUpload = function() {
  return /** @type{?proto.pb.Upload} */ (
    jspb.Message.getWrapperField(this, proto_entities_load_pb.Upload, 4));
};


/**
 * @param {?proto.pb.Upload|undefined} value
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
*/
proto.pb.OperationAssignmentExcavator.prototype.setUpload = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
 */
proto.pb.OperationAssignmentExcavator.prototype.clearUpload = function() {
  return this.setUpload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.OperationAssignmentExcavator.prototype.hasUpload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Download download = 5;
 * @return {?proto.pb.Download}
 */
proto.pb.OperationAssignmentExcavator.prototype.getDownload = function() {
  return /** @type{?proto.pb.Download} */ (
    jspb.Message.getWrapperField(this, proto_entities_load_pb.Download, 5));
};


/**
 * @param {?proto.pb.Download|undefined} value
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
*/
proto.pb.OperationAssignmentExcavator.prototype.setDownload = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
 */
proto.pb.OperationAssignmentExcavator.prototype.clearDownload = function() {
  return this.setDownload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.OperationAssignmentExcavator.prototype.hasDownload = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Shift shift = 6;
 * @return {!proto.pb.OperationAssignmentExcavator.Shift}
 */
proto.pb.OperationAssignmentExcavator.prototype.getShift = function() {
  return /** @type {!proto.pb.OperationAssignmentExcavator.Shift} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.pb.OperationAssignmentExcavator.Shift} value
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
 */
proto.pb.OperationAssignmentExcavator.prototype.setShift = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional State state = 7;
 * @return {!proto.pb.OperationAssignmentExcavator.State}
 */
proto.pb.OperationAssignmentExcavator.prototype.getState = function() {
  return /** @type {!proto.pb.OperationAssignmentExcavator.State} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.pb.OperationAssignmentExcavator.State} value
 * @return {!proto.pb.OperationAssignmentExcavator} returns this
 */
proto.pb.OperationAssignmentExcavator.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Excavator.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Excavator.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Excavator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Excavator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Excavator.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceAlias: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceInterval: jspb.Message.getFieldWithDefault(msg, 4, 0),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    plate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    hourmeter: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    contractor: (f = msg.getContractor()) && proto_entities_contractor_pb.Contractor.toObject(includeInstance, f),
    sensor: (f = msg.getSensor()) && proto_entities_sensor_pb.Sensor.toObject(includeInstance, f),
    operationList: jspb.Message.toObjectList(msg.getOperationList(),
    proto.pb.OperationAssignmentExcavator.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Excavator}
 */
proto.pb.Excavator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Excavator;
  return proto.pb.Excavator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Excavator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Excavator}
 */
proto.pb.Excavator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAlias(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceInterval(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHourmeter(value);
      break;
    case 8:
      var value = new proto_entities_contractor_pb.Contractor;
      reader.readMessage(value,proto_entities_contractor_pb.Contractor.deserializeBinaryFromReader);
      msg.setContractor(value);
      break;
    case 9:
      var value = new proto_entities_sensor_pb.Sensor;
      reader.readMessage(value,proto_entities_sensor_pb.Sensor.deserializeBinaryFromReader);
      msg.setSensor(value);
      break;
    case 10:
      var value = new proto.pb.OperationAssignmentExcavator;
      reader.readMessage(value,proto.pb.OperationAssignmentExcavator.deserializeBinaryFromReader);
      msg.addOperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Excavator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Excavator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Excavator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Excavator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceAlias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceInterval();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPlate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getHourmeter();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getContractor();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto_entities_contractor_pb.Contractor.serializeBinaryToWriter
    );
  }
  f = message.getSensor();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto_entities_sensor_pb.Sensor.serializeBinaryToWriter
    );
  }
  f = message.getOperationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.pb.OperationAssignmentExcavator.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.Excavator.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.pb.Excavator.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_alias = 3;
 * @return {string}
 */
proto.pb.Excavator.prototype.getDeviceAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setDeviceAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 device_interval = 4;
 * @return {number}
 */
proto.pb.Excavator.prototype.getDeviceInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setDeviceInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.pb.Excavator.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string plate = 6;
 * @return {string}
 */
proto.pb.Excavator.prototype.getPlate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setPlate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional float hourmeter = 7;
 * @return {number}
 */
proto.pb.Excavator.prototype.getHourmeter = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setHourmeter = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional Contractor contractor = 8;
 * @return {?proto.pb.Contractor}
 */
proto.pb.Excavator.prototype.getContractor = function() {
  return /** @type{?proto.pb.Contractor} */ (
    jspb.Message.getWrapperField(this, proto_entities_contractor_pb.Contractor, 8));
};


/**
 * @param {?proto.pb.Contractor|undefined} value
 * @return {!proto.pb.Excavator} returns this
*/
proto.pb.Excavator.prototype.setContractor = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.clearContractor = function() {
  return this.setContractor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Excavator.prototype.hasContractor = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Sensor sensor = 9;
 * @return {?proto.pb.Sensor}
 */
proto.pb.Excavator.prototype.getSensor = function() {
  return /** @type{?proto.pb.Sensor} */ (
    jspb.Message.getWrapperField(this, proto_entities_sensor_pb.Sensor, 9));
};


/**
 * @param {?proto.pb.Sensor|undefined} value
 * @return {!proto.pb.Excavator} returns this
*/
proto.pb.Excavator.prototype.setSensor = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.clearSensor = function() {
  return this.setSensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Excavator.prototype.hasSensor = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated OperationAssignmentExcavator operation = 10;
 * @return {!Array<!proto.pb.OperationAssignmentExcavator>}
 */
proto.pb.Excavator.prototype.getOperationList = function() {
  return /** @type{!Array<!proto.pb.OperationAssignmentExcavator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.OperationAssignmentExcavator, 10));
};


/**
 * @param {!Array<!proto.pb.OperationAssignmentExcavator>} value
 * @return {!proto.pb.Excavator} returns this
*/
proto.pb.Excavator.prototype.setOperationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pb.OperationAssignmentExcavator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.OperationAssignmentExcavator}
 */
proto.pb.Excavator.prototype.addOperation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.OperationAssignmentExcavator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.clearOperationList = function() {
  return this.setOperationList([]);
};


goog.object.extend(exports, proto.pb);
