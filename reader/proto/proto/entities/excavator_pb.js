<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/entities/excavator_pb.js
// source: proto/entities/excavator.proto
=======
// source: proto/entities/streaming_history.proto
>>>>>>> staging:reader/proto/proto/entities/streaming_history_pb.js
=======
// source: proto/entities/excavator.proto
>>>>>>> staging
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/entities/excavator_pb.js
var proto_entities_contractor_pb = require('../../proto/entities/contractor_pb.js');
goog.object.extend(proto, proto_entities_contractor_pb);
goog.exportSymbol('proto.pb.Excavator', null, global);
=======
var proto_entities_sensor_pb = require('../../proto/entities/sensor_pb.js');
goog.object.extend(proto, proto_entities_sensor_pb);
var proto_enums_event_state_enums_pb = require('../../proto/enums/event_state.enums_pb.js');
goog.object.extend(proto, proto_enums_event_state_enums_pb);
goog.exportSymbol('proto.pb.TruckStatus', null, global);
>>>>>>> staging:reader/proto/proto/entities/streaming_history_pb.js
=======
var proto_entities_contractor_pb = require('../../proto/entities/contractor_pb.js');
goog.object.extend(proto, proto_entities_contractor_pb);
goog.exportSymbol('proto.pb.Excavator', null, global);
>>>>>>> staging
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Excavator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.Excavator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Excavator.displayName = 'proto.pb.Excavator';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Excavator.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Excavator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Excavator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Excavator.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceAlias: jspb.Message.getFieldWithDefault(msg, 3, ""),
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/entities/excavator_pb.js
=======
>>>>>>> staging
    deviceInterval: jspb.Message.getFieldWithDefault(msg, 4, 0),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    plate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    contractor: (f = msg.getContractor()) && proto_entities_contractor_pb.Contractor.toObject(includeInstance, f)
<<<<<<< HEAD
=======
    cycleId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    operationId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cycleNumber: jspb.Message.getFieldWithDefault(msg, 6, 0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sensor: (f = msg.getSensor()) && proto_entities_sensor_pb.Sensor.toObject(includeInstance, f)
>>>>>>> staging:reader/proto/proto/entities/streaming_history_pb.js
=======
>>>>>>> staging
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Excavator}
 */
proto.pb.Excavator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Excavator;
  return proto.pb.Excavator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Excavator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Excavator}
 */
proto.pb.Excavator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAlias(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceInterval(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlate(value);
      break;
    case 7:
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/entities/excavator_pb.js
      var value = new proto_entities_contractor_pb.Contractor;
      reader.readMessage(value,proto_entities_contractor_pb.Contractor.deserializeBinaryFromReader);
      msg.setContractor(value);
=======
      var value = /** @type {!proto.pb.EnumEventState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 8:
      var value = new proto_entities_sensor_pb.Sensor;
      reader.readMessage(value,proto_entities_sensor_pb.Sensor.deserializeBinaryFromReader);
      msg.setSensor(value);
>>>>>>> staging:reader/proto/proto/entities/streaming_history_pb.js
=======
      var value = new proto_entities_contractor_pb.Contractor;
      reader.readMessage(value,proto_entities_contractor_pb.Contractor.deserializeBinaryFromReader);
      msg.setContractor(value);
>>>>>>> staging
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Excavator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Excavator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Excavator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Excavator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeviceAlias();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDeviceInterval();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPlate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getContractor();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/entities/excavator_pb.js
      proto_entities_contractor_pb.Contractor.serializeBinaryToWriter
=======
      proto_entities_sensor_pb.Sensor.serializeBinaryToWriter
>>>>>>> staging:reader/proto/proto/entities/streaming_history_pb.js
=======
      proto_entities_contractor_pb.Contractor.serializeBinaryToWriter
>>>>>>> staging
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.Excavator.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.pb.Excavator.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string device_alias = 3;
 * @return {string}
 */
proto.pb.Excavator.prototype.getDeviceAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setDeviceAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 device_interval = 4;
 * @return {number}
 */
proto.pb.Excavator.prototype.getDeviceInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setDeviceInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.pb.Excavator.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/entities/excavator_pb.js
=======
>>>>>>> staging
 * optional string plate = 6;
 * @return {string}
 */
proto.pb.Excavator.prototype.getPlate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
<<<<<<< HEAD
=======
 * optional int32 cycle_number = 6;
 * @return {number}
 */
proto.pb.TruckStatus.prototype.getCycleNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.TruckStatus} returns this
 */
proto.pb.TruckStatus.prototype.setCycleNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional EnumEventState state = 7;
 * @return {!proto.pb.EnumEventState}
 */
proto.pb.TruckStatus.prototype.getState = function() {
  return /** @type {!proto.pb.EnumEventState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
>>>>>>> staging:reader/proto/proto/entities/streaming_history_pb.js
=======
>>>>>>> staging
};


/**
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/entities/excavator_pb.js
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
=======
 * @param {!proto.pb.EnumEventState} value
 * @return {!proto.pb.TruckStatus} returns this
>>>>>>> staging:reader/proto/proto/entities/streaming_history_pb.js
=======
 * @param {string} value
 * @return {!proto.pb.Excavator} returns this
>>>>>>> staging
 */
proto.pb.Excavator.prototype.setPlate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Contractor contractor = 7;
 * @return {?proto.pb.Contractor}
 */
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/entities/excavator_pb.js
proto.pb.Excavator.prototype.getContractor = function() {
  return /** @type{?proto.pb.Contractor} */ (
    jspb.Message.getWrapperField(this, proto_entities_contractor_pb.Contractor, 7));
=======
proto.pb.TruckStatus.prototype.getSensor = function() {
  return /** @type{?proto.pb.Sensor} */ (
    jspb.Message.getWrapperField(this, proto_entities_sensor_pb.Sensor, 8));
>>>>>>> staging:reader/proto/proto/entities/streaming_history_pb.js
=======
proto.pb.Excavator.prototype.getContractor = function() {
  return /** @type{?proto.pb.Contractor} */ (
    jspb.Message.getWrapperField(this, proto_entities_contractor_pb.Contractor, 7));
>>>>>>> staging
};


/**
 * @param {?proto.pb.Contractor|undefined} value
 * @return {!proto.pb.Excavator} returns this
*/
proto.pb.Excavator.prototype.setContractor = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.Excavator} returns this
 */
proto.pb.Excavator.prototype.clearContractor = function() {
  return this.setContractor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.Excavator.prototype.hasContractor = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.pb);
