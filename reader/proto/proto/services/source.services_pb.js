<<<<<<< HEAD
// source: proto/services/source.services.proto
=======
<<<<<<< HEAD:reader/proto/proto/services/sensor.services_pb.js
// source: proto/services/sensor.services.proto
=======
// source: proto/services/source.services.proto
>>>>>>> staging:reader/proto/proto/services/source.services_pb.js
>>>>>>> staging
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

<<<<<<< HEAD
goog.exportSymbol('proto.pb.SourceRequest', null, global);
goog.exportSymbol('proto.pb.SourceResponse', null, global);
=======
var proto_entities_sensor_pb = require('../../proto/entities/sensor_pb.js');
goog.object.extend(proto, proto_entities_sensor_pb);
goog.exportSymbol('proto.pb.ServerSensorRequest', null, global);
goog.exportSymbol('proto.pb.ServerSensorResponse', null, global);
>>>>>>> staging
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
<<<<<<< HEAD
proto.pb.SourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SourceRequest, jspb.Message);
=======
proto.pb.ServerSensorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ServerSensorRequest, jspb.Message);
>>>>>>> staging
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
<<<<<<< HEAD
  proto.pb.SourceRequest.displayName = 'proto.pb.SourceRequest';
=======
  proto.pb.ServerSensorRequest.displayName = 'proto.pb.ServerSensorRequest';
>>>>>>> staging
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
<<<<<<< HEAD
proto.pb.SourceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.SourceResponse, jspb.Message);
=======
proto.pb.ServerSensorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ServerSensorResponse, jspb.Message);
>>>>>>> staging
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
<<<<<<< HEAD
  proto.pb.SourceResponse.displayName = 'proto.pb.SourceResponse';
=======
  proto.pb.ServerSensorResponse.displayName = 'proto.pb.ServerSensorResponse';
>>>>>>> staging
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
<<<<<<< HEAD
proto.pb.SourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SourceRequest.toObject(opt_includeInstance, this);
=======
proto.pb.ServerSensorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ServerSensorRequest.toObject(opt_includeInstance, this);
>>>>>>> staging
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
<<<<<<< HEAD
 * @param {!proto.pb.SourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    load: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
=======
 * @param {!proto.pb.ServerSensorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ServerSensorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

>>>>>>> staging
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
<<<<<<< HEAD
 * @return {!proto.pb.SourceRequest}
 */
proto.pb.SourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SourceRequest;
  return proto.pb.SourceRequest.deserializeBinaryFromReader(msg, reader);
=======
 * @return {!proto.pb.ServerSensorRequest}
 */
proto.pb.ServerSensorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ServerSensorRequest;
  return proto.pb.ServerSensorRequest.deserializeBinaryFromReader(msg, reader);
>>>>>>> staging
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
<<<<<<< HEAD
 * @param {!proto.pb.SourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SourceRequest}
 */
proto.pb.SourceRequest.deserializeBinaryFromReader = function(msg, reader) {
=======
 * @param {!proto.pb.ServerSensorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ServerSensorRequest}
 */
proto.pb.ServerSensorRequest.deserializeBinaryFromReader = function(msg, reader) {
>>>>>>> staging
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
<<<<<<< HEAD
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLoad(value);
      break;
=======
>>>>>>> staging
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
<<<<<<< HEAD
proto.pb.SourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SourceRequest.serializeBinaryToWriter(this, writer);
=======
proto.pb.ServerSensorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ServerSensorRequest.serializeBinaryToWriter(this, writer);
>>>>>>> staging
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
<<<<<<< HEAD
 * @param {!proto.pb.SourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoad();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool load = 1;
 * @return {boolean}
 */
proto.pb.SourceRequest.prototype.getLoad = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.SourceRequest} returns this
 */
proto.pb.SourceRequest.prototype.setLoad = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
=======
 * @param {!proto.pb.ServerSensorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ServerSensorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
>>>>>>> staging
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
<<<<<<< HEAD
proto.pb.SourceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.SourceResponse.toObject(opt_includeInstance, this);
=======
proto.pb.ServerSensorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ServerSensorResponse.toObject(opt_includeInstance, this);
>>>>>>> staging
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
<<<<<<< HEAD
 * @param {!proto.pb.SourceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SourceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    done: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
=======
 * @param {!proto.pb.ServerSensorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ServerSensorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensor: (f = msg.getSensor()) && proto_entities_sensor_pb.BasicSensor.toObject(includeInstance, f)
>>>>>>> staging
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
<<<<<<< HEAD
 * @return {!proto.pb.SourceResponse}
 */
proto.pb.SourceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.SourceResponse;
  return proto.pb.SourceResponse.deserializeBinaryFromReader(msg, reader);
=======
 * @return {!proto.pb.ServerSensorResponse}
 */
proto.pb.ServerSensorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ServerSensorResponse;
  return proto.pb.ServerSensorResponse.deserializeBinaryFromReader(msg, reader);
>>>>>>> staging
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
<<<<<<< HEAD
 * @param {!proto.pb.SourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.SourceResponse}
 */
proto.pb.SourceResponse.deserializeBinaryFromReader = function(msg, reader) {
=======
 * @param {!proto.pb.ServerSensorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ServerSensorResponse}
 */
proto.pb.ServerSensorResponse.deserializeBinaryFromReader = function(msg, reader) {
>>>>>>> staging
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
<<<<<<< HEAD
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDone(value);
=======
      var value = new proto_entities_sensor_pb.BasicSensor;
      reader.readMessage(value,proto_entities_sensor_pb.BasicSensor.deserializeBinaryFromReader);
      msg.setSensor(value);
>>>>>>> staging
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
<<<<<<< HEAD
proto.pb.SourceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.SourceResponse.serializeBinaryToWriter(this, writer);
=======
proto.pb.ServerSensorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ServerSensorResponse.serializeBinaryToWriter(this, writer);
>>>>>>> staging
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
<<<<<<< HEAD
 * @param {!proto.pb.SourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.SourceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDone();
  if (f) {
    writer.writeBool(
      1,
      f
=======
 * @param {!proto.pb.ServerSensorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ServerSensorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_entities_sensor_pb.BasicSensor.serializeBinaryToWriter
>>>>>>> staging
    );
  }
};


/**
<<<<<<< HEAD
 * optional bool done = 1;
 * @return {boolean}
 */
proto.pb.SourceResponse.prototype.getDone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
=======
 * optional BasicSensor sensor = 1;
 * @return {?proto.pb.BasicSensor}
 */
proto.pb.ServerSensorResponse.prototype.getSensor = function() {
  return /** @type{?proto.pb.BasicSensor} */ (
    jspb.Message.getWrapperField(this, proto_entities_sensor_pb.BasicSensor, 1));
};


/**
 * @param {?proto.pb.BasicSensor|undefined} value
 * @return {!proto.pb.ServerSensorResponse} returns this
*/
proto.pb.ServerSensorResponse.prototype.setSensor = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ServerSensorResponse} returns this
 */
proto.pb.ServerSensorResponse.prototype.clearSensor = function() {
  return this.setSensor(undefined);
>>>>>>> staging
};


/**
<<<<<<< HEAD
 * @param {boolean} value
 * @return {!proto.pb.SourceResponse} returns this
 */
proto.pb.SourceResponse.prototype.setDone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
=======
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ServerSensorResponse.prototype.hasSensor = function() {
  return jspb.Message.getField(this, 1) != null;
>>>>>>> staging
};


goog.object.extend(exports, proto.pb);
