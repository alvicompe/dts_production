// source: proto/services/event_state.services.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_entities_event_state_pb = require('../../proto/entities/event_state_pb.js');
goog.object.extend(proto, proto_entities_event_state_pb);
var proto_enums_event_enums_pb = require('../../proto/enums/event.enums_pb.js');
goog.object.extend(proto, proto_enums_event_enums_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.pb.EventStateByEventRequest', null, global);
goog.exportSymbol('proto.pb.EventStateRequest', null, global);
goog.exportSymbol('proto.pb.EventStateResponse', null, global);
goog.exportSymbol('proto.pb.ListEventStateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.EventStateByEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.EventStateByEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.EventStateByEventRequest.displayName = 'proto.pb.EventStateByEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.EventStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.EventStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.EventStateRequest.displayName = 'proto.pb.EventStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ListEventStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ListEventStateResponse.repeatedFields_, null);
};
goog.inherits(proto.pb.ListEventStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ListEventStateResponse.displayName = 'proto.pb.ListEventStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.EventStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.EventStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.EventStateResponse.displayName = 'proto.pb.EventStateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.EventStateByEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.EventStateByEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.EventStateByEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EventStateByEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventState: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.EventStateByEventRequest}
 */
proto.pb.EventStateByEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.EventStateByEventRequest;
  return proto.pb.EventStateByEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.EventStateByEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.EventStateByEventRequest}
 */
proto.pb.EventStateByEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.pb.EnumEvent} */ (reader.readEnum());
      msg.setEventState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.EventStateByEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.EventStateByEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.EventStateByEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EventStateByEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.EventStateByEventRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.EventStateByEventRequest} returns this
 */
proto.pb.EventStateByEventRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EnumEvent event_state = 2;
 * @return {!proto.pb.EnumEvent}
 */
proto.pb.EventStateByEventRequest.prototype.getEventState = function() {
  return /** @type {!proto.pb.EnumEvent} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pb.EnumEvent} value
 * @return {!proto.pb.EventStateByEventRequest} returns this
 */
proto.pb.EventStateByEventRequest.prototype.setEventState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.EventStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.EventStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.EventStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EventStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventState: (f = msg.getEventState()) && proto_entities_event_state_pb.EventState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.EventStateRequest}
 */
proto.pb.EventStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.EventStateRequest;
  return proto.pb.EventStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.EventStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.EventStateRequest}
 */
proto.pb.EventStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_entities_event_state_pb.EventState;
      reader.readMessage(value,proto_entities_event_state_pb.EventState.deserializeBinaryFromReader);
      msg.setEventState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.EventStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.EventStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.EventStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EventStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_entities_event_state_pb.EventState.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventState event_state = 1;
 * @return {?proto.pb.EventState}
 */
proto.pb.EventStateRequest.prototype.getEventState = function() {
  return /** @type{?proto.pb.EventState} */ (
    jspb.Message.getWrapperField(this, proto_entities_event_state_pb.EventState, 1));
};


/**
 * @param {?proto.pb.EventState|undefined} value
 * @return {!proto.pb.EventStateRequest} returns this
*/
proto.pb.EventStateRequest.prototype.setEventState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.EventStateRequest} returns this
 */
proto.pb.EventStateRequest.prototype.clearEventState = function() {
  return this.setEventState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.EventStateRequest.prototype.hasEventState = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ListEventStateResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ListEventStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ListEventStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ListEventStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ListEventStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    eventStatesList: jspb.Message.toObjectList(msg.getEventStatesList(),
    proto_entities_event_state_pb.EventState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ListEventStateResponse}
 */
proto.pb.ListEventStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ListEventStateResponse;
  return proto.pb.ListEventStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ListEventStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ListEventStateResponse}
 */
proto.pb.ListEventStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    case 2:
      var value = new proto_entities_event_state_pb.EventState;
      reader.readMessage(value,proto_entities_event_state_pb.EventState.deserializeBinaryFromReader);
      msg.addEventStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ListEventStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ListEventStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ListEventStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ListEventStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEventStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto_entities_event_state_pb.EventState.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool state = 1;
 * @return {boolean}
 */
proto.pb.ListEventStateResponse.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.ListEventStateResponse} returns this
 */
proto.pb.ListEventStateResponse.prototype.setState = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated EventState event_states = 2;
 * @return {!Array<!proto.pb.EventState>}
 */
proto.pb.ListEventStateResponse.prototype.getEventStatesList = function() {
  return /** @type{!Array<!proto.pb.EventState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_entities_event_state_pb.EventState, 2));
};


/**
 * @param {!Array<!proto.pb.EventState>} value
 * @return {!proto.pb.ListEventStateResponse} returns this
*/
proto.pb.ListEventStateResponse.prototype.setEventStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pb.EventState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.EventState}
 */
proto.pb.ListEventStateResponse.prototype.addEventStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pb.EventState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.ListEventStateResponse} returns this
 */
proto.pb.ListEventStateResponse.prototype.clearEventStatesList = function() {
  return this.setEventStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.EventStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.EventStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.EventStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EventStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    eventState: (f = msg.getEventState()) && proto_entities_event_state_pb.EventState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.EventStateResponse}
 */
proto.pb.EventStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.EventStateResponse;
  return proto.pb.EventStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.EventStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.EventStateResponse}
 */
proto.pb.EventStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    case 2:
      var value = new proto_entities_event_state_pb.EventState;
      reader.readMessage(value,proto_entities_event_state_pb.EventState.deserializeBinaryFromReader);
      msg.setEventState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.EventStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.EventStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.EventStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.EventStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEventState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_entities_event_state_pb.EventState.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool state = 1;
 * @return {boolean}
 */
proto.pb.EventStateResponse.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.EventStateResponse} returns this
 */
proto.pb.EventStateResponse.prototype.setState = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional EventState event_state = 2;
 * @return {?proto.pb.EventState}
 */
proto.pb.EventStateResponse.prototype.getEventState = function() {
  return /** @type{?proto.pb.EventState} */ (
    jspb.Message.getWrapperField(this, proto_entities_event_state_pb.EventState, 2));
};


/**
 * @param {?proto.pb.EventState|undefined} value
 * @return {!proto.pb.EventStateResponse} returns this
*/
proto.pb.EventStateResponse.prototype.setEventState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.EventStateResponse} returns this
 */
proto.pb.EventStateResponse.prototype.clearEventState = function() {
  return this.setEventState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.EventStateResponse.prototype.hasEventState = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.pb);
