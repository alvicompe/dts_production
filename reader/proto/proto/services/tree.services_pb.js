<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
// source: proto/services/tree.services.proto
=======
// source: proto/services/auth.services.proto
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
// source: proto/services/tree.services.proto
>>>>>>> staging
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
=======
>>>>>>> staging
var proto_entities_tree_pb = require('../../proto/entities/tree_pb.js');
goog.object.extend(proto, proto_entities_tree_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.pb.CreateTreeRequest', null, global);
goog.exportSymbol('proto.pb.RetrieveTreeByIdRequest', null, global);
goog.exportSymbol('proto.pb.TreeResponse', null, global);
<<<<<<< HEAD
=======
var proto_entities_user_pb = require('../../proto/entities/user_pb.js');
goog.object.extend(proto, proto_entities_user_pb);
goog.exportSymbol('proto.pb.LoginRequest', null, global);
goog.exportSymbol('proto.pb.LoginResponse', null, global);
goog.exportSymbol('proto.pb.Token', null, global);
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
>>>>>>> staging
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TreeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TreeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TreeResponse.displayName = 'proto.pb.TreeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CreateTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.CreateTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.CreateTreeRequest.displayName = 'proto.pb.CreateTreeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.RetrieveTreeByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.RetrieveTreeByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.RetrieveTreeByIdRequest.displayName = 'proto.pb.RetrieveTreeByIdRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TreeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TreeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TreeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TreeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tree: (f = msg.getTree()) && proto_entities_tree_pb.Tree.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TreeResponse}
 */
proto.pb.TreeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TreeResponse;
  return proto.pb.TreeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TreeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TreeResponse}
 */
proto.pb.TreeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto_entities_tree_pb.Tree;
      reader.readMessage(value,proto_entities_tree_pb.Tree.deserializeBinaryFromReader);
      msg.setTree(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TreeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TreeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TreeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TreeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTree();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto_entities_tree_pb.Tree.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.pb.TreeResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.TreeResponse} returns this
 */
proto.pb.TreeResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.pb.TreeResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TreeResponse} returns this
 */
proto.pb.TreeResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Tree tree = 3;
 * @return {?proto.pb.Tree}
 */
proto.pb.TreeResponse.prototype.getTree = function() {
  return /** @type{?proto.pb.Tree} */ (
    jspb.Message.getWrapperField(this, proto_entities_tree_pb.Tree, 3));
};


/**
 * @param {?proto.pb.Tree|undefined} value
 * @return {!proto.pb.TreeResponse} returns this
*/
proto.pb.TreeResponse.prototype.setTree = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TreeResponse} returns this
 */
proto.pb.TreeResponse.prototype.clearTree = function() {
  return this.setTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TreeResponse.prototype.hasTree = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CreateTreeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CreateTreeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CreateTreeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CreateTreeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
    tree: (f = msg.getTree()) && proto_entities_tree_pb.Tree.toObject(includeInstance, f)
=======
    user: (f = msg.getUser()) && proto_entities_user_pb.User.toObject(includeInstance, f)
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
    tree: (f = msg.getTree()) && proto_entities_tree_pb.Tree.toObject(includeInstance, f)
>>>>>>> staging
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CreateTreeRequest}
 */
proto.pb.CreateTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CreateTreeRequest;
  return proto.pb.CreateTreeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CreateTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CreateTreeRequest}
 */
proto.pb.CreateTreeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
      var value = new proto_entities_tree_pb.Tree;
      reader.readMessage(value,proto_entities_tree_pb.Tree.deserializeBinaryFromReader);
      msg.setTree(value);
=======
      var value = new proto_entities_user_pb.User;
      reader.readMessage(value,proto_entities_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
      var value = new proto_entities_tree_pb.Tree;
      reader.readMessage(value,proto_entities_tree_pb.Tree.deserializeBinaryFromReader);
      msg.setTree(value);
>>>>>>> staging
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CreateTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CreateTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CreateTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CreateTreeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTree();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
      proto_entities_tree_pb.Tree.serializeBinaryToWriter
=======
      proto_entities_user_pb.User.serializeBinaryToWriter
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
      proto_entities_tree_pb.Tree.serializeBinaryToWriter
>>>>>>> staging
    );
  }
};


/**
 * optional Tree tree = 1;
 * @return {?proto.pb.Tree}
 */
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
proto.pb.CreateTreeRequest.prototype.getTree = function() {
  return /** @type{?proto.pb.Tree} */ (
    jspb.Message.getWrapperField(this, proto_entities_tree_pb.Tree, 1));
=======
proto.pb.LoginRequest.prototype.getUser = function() {
  return /** @type{?proto.pb.User} */ (
    jspb.Message.getWrapperField(this, proto_entities_user_pb.User, 1));
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
proto.pb.CreateTreeRequest.prototype.getTree = function() {
  return /** @type{?proto.pb.Tree} */ (
    jspb.Message.getWrapperField(this, proto_entities_tree_pb.Tree, 1));
>>>>>>> staging
};


/**
 * @param {?proto.pb.Tree|undefined} value
 * @return {!proto.pb.CreateTreeRequest} returns this
*/
proto.pb.CreateTreeRequest.prototype.setTree = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.CreateTreeRequest} returns this
 */
proto.pb.CreateTreeRequest.prototype.clearTree = function() {
  return this.setTree(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.CreateTreeRequest.prototype.hasTree = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.RetrieveTreeByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.RetrieveTreeByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.RetrieveTreeByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RetrieveTreeByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
=======
    user: (f = msg.getUser()) && proto_entities_user_pb.User.toObject(includeInstance, f),
    token: (f = msg.getToken()) && proto.pb.Token.toObject(includeInstance, f)
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
>>>>>>> staging
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.RetrieveTreeByIdRequest}
 */
proto.pb.RetrieveTreeByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.RetrieveTreeByIdRequest;
  return proto.pb.RetrieveTreeByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.RetrieveTreeByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.RetrieveTreeByIdRequest}
 */
proto.pb.RetrieveTreeByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
=======
      var value = new proto_entities_user_pb.User;
      reader.readMessage(value,proto_entities_user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.pb.Token;
      reader.readMessage(value,proto.pb.Token.deserializeBinaryFromReader);
      msg.setToken(value);
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
>>>>>>> staging
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.RetrieveTreeByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.RetrieveTreeByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.RetrieveTreeByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.RetrieveTreeByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
      f
=======
      f,
      proto_entities_user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pb.Token.serializeBinaryToWriter
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
      f
>>>>>>> staging
    );
  }
};


/**
<<<<<<< HEAD
<<<<<<< HEAD:reader/proto/proto/services/tree.services_pb.js
 * optional string id = 1;
 * @return {string}
=======
 * optional User user = 1;
 * @return {?proto.pb.User}
 */
proto.pb.LoginResponse.prototype.getUser = function() {
  return /** @type{?proto.pb.User} */ (
    jspb.Message.getWrapperField(this, proto_entities_user_pb.User, 1));
};


/**
 * @param {?proto.pb.User|undefined} value
 * @return {!proto.pb.LoginResponse} returns this
*/
proto.pb.LoginResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.LoginResponse} returns this
 */
proto.pb.LoginResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.LoginResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Token token = 2;
 * @return {?proto.pb.Token}
 */
proto.pb.LoginResponse.prototype.getToken = function() {
  return /** @type{?proto.pb.Token} */ (
    jspb.Message.getWrapperField(this, proto.pb.Token, 2));
};


/**
 * @param {?proto.pb.Token|undefined} value
 * @return {!proto.pb.LoginResponse} returns this
*/
proto.pb.LoginResponse.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.LoginResponse} returns this
>>>>>>> staging:reader/proto/proto/services/auth.services_pb.js
=======
 * optional string id = 1;
 * @return {string}
>>>>>>> staging
 */
proto.pb.RetrieveTreeByIdRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.RetrieveTreeByIdRequest} returns this
 */
proto.pb.RetrieveTreeByIdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.pb);
