// source: proto/streaming.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_geofence_pb = require('../proto/geofence_pb.js');
goog.object.extend(proto, proto_geofence_pb);
var proto_road_pb = require('../proto/road_pb.js');
goog.object.extend(proto, proto_road_pb);
var proto_point_pb = require('../proto/point_pb.js');
goog.object.extend(proto, proto_point_pb);
var proto_sensor_pb = require('../proto/sensor_pb.js');
goog.object.extend(proto, proto_sensor_pb);
var proto_pit_pb = require('../proto/pit_pb.js');
goog.object.extend(proto, proto_pit_pb);
var proto_pad_pb = require('../proto/pad_pb.js');
goog.object.extend(proto, proto_pad_pb);
var proto_stock_pb = require('../proto/stock_pb.js');
goog.object.extend(proto, proto_stock_pb);
var proto_dme_pb = require('../proto/dme_pb.js');
goog.object.extend(proto, proto_dme_pb);
var proto_excavator_pb = require('../proto/excavator_pb.js');
goog.object.extend(proto, proto_excavator_pb);
var proto_truck_pb = require('../proto/truck_pb.js');
goog.object.extend(proto, proto_truck_pb);
var proto_load_pb = require('../proto/load_pb.js');
goog.object.extend(proto, proto_load_pb);
goog.exportSymbol('proto.pb.ExcavatorInfo', null, global);
goog.exportSymbol('proto.pb.ExcavatorInfo.State', null, global);
goog.exportSymbol('proto.pb.ExcavatorInfoRequest', null, global);
goog.exportSymbol('proto.pb.ExcavatorInfoResponse', null, global);
goog.exportSymbol('proto.pb.OperationAssignment', null, global);
goog.exportSymbol('proto.pb.OperationAssignment.Shift', null, global);
goog.exportSymbol('proto.pb.OperationAssignment.State', null, global);
goog.exportSymbol('proto.pb.TruckInfo', null, global);
goog.exportSymbol('proto.pb.TruckInfo.State', null, global);
goog.exportSymbol('proto.pb.TruckInfoRequest', null, global);
goog.exportSymbol('proto.pb.TruckInfoResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.OperationAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.OperationAssignment.repeatedFields_, null);
};
goog.inherits(proto.pb.OperationAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.OperationAssignment.displayName = 'proto.pb.OperationAssignment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TruckInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.TruckInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.TruckInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TruckInfo.displayName = 'proto.pb.TruckInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ExcavatorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.ExcavatorInfo.repeatedFields_, null);
};
goog.inherits(proto.pb.ExcavatorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ExcavatorInfo.displayName = 'proto.pb.ExcavatorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TruckInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TruckInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TruckInfoRequest.displayName = 'proto.pb.TruckInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.TruckInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.TruckInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.TruckInfoResponse.displayName = 'proto.pb.TruckInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ExcavatorInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ExcavatorInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ExcavatorInfoRequest.displayName = 'proto.pb.ExcavatorInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ExcavatorInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ExcavatorInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.ExcavatorInfoResponse.displayName = 'proto.pb.ExcavatorInfoResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.OperationAssignment.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.OperationAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.OperationAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.OperationAssignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.OperationAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    excavator: (f = msg.getExcavator()) && proto_excavator_pb.Excavator.toObject(includeInstance, f),
    truckList: jspb.Message.toObjectList(msg.getTruckList(),
    proto_truck_pb.Truck.toObject, includeInstance),
    upload: (f = msg.getUpload()) && proto_load_pb.Upload.toObject(includeInstance, f),
    download: (f = msg.getDownload()) && proto_load_pb.Download.toObject(includeInstance, f),
    shift: jspb.Message.getFieldWithDefault(msg, 6, 0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.OperationAssignment}
 */
proto.pb.OperationAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.OperationAssignment;
  return proto.pb.OperationAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.OperationAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.OperationAssignment}
 */
proto.pb.OperationAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto_excavator_pb.Excavator;
      reader.readMessage(value,proto_excavator_pb.Excavator.deserializeBinaryFromReader);
      msg.setExcavator(value);
      break;
    case 3:
      var value = new proto_truck_pb.Truck;
      reader.readMessage(value,proto_truck_pb.Truck.deserializeBinaryFromReader);
      msg.addTruck(value);
      break;
    case 4:
      var value = new proto_load_pb.Upload;
      reader.readMessage(value,proto_load_pb.Upload.deserializeBinaryFromReader);
      msg.setUpload(value);
      break;
    case 5:
      var value = new proto_load_pb.Download;
      reader.readMessage(value,proto_load_pb.Download.deserializeBinaryFromReader);
      msg.setDownload(value);
      break;
    case 6:
      var value = /** @type {!proto.pb.OperationAssignment.Shift} */ (reader.readEnum());
      msg.setShift(value);
      break;
    case 7:
      var value = /** @type {!proto.pb.OperationAssignment.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.OperationAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.OperationAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.OperationAssignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.OperationAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExcavator();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto_excavator_pb.Excavator.serializeBinaryToWriter
    );
  }
  f = message.getTruckList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto_truck_pb.Truck.serializeBinaryToWriter
    );
  }
  f = message.getUpload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_load_pb.Upload.serializeBinaryToWriter
    );
  }
  f = message.getDownload();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto_load_pb.Download.serializeBinaryToWriter
    );
  }
  f = message.getShift();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.OperationAssignment.Shift = {
  UNKNOWN_SHIFT: 0,
  NIGHT: 1,
  DAY: 2
};

/**
 * @enum {number}
 */
proto.pb.OperationAssignment.State = {
  UNKNOWN_STATE: 0,
  PENDING: 1,
  OPENED: 2,
  CLOSED: 3
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.OperationAssignment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.OperationAssignment} returns this
 */
proto.pb.OperationAssignment.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Excavator excavator = 2;
 * @return {?proto.pb.Excavator}
 */
proto.pb.OperationAssignment.prototype.getExcavator = function() {
  return /** @type{?proto.pb.Excavator} */ (
    jspb.Message.getWrapperField(this, proto_excavator_pb.Excavator, 2));
};


/**
 * @param {?proto.pb.Excavator|undefined} value
 * @return {!proto.pb.OperationAssignment} returns this
*/
proto.pb.OperationAssignment.prototype.setExcavator = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.OperationAssignment} returns this
 */
proto.pb.OperationAssignment.prototype.clearExcavator = function() {
  return this.setExcavator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.OperationAssignment.prototype.hasExcavator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Truck truck = 3;
 * @return {!Array<!proto.pb.Truck>}
 */
proto.pb.OperationAssignment.prototype.getTruckList = function() {
  return /** @type{!Array<!proto.pb.Truck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_truck_pb.Truck, 3));
};


/**
 * @param {!Array<!proto.pb.Truck>} value
 * @return {!proto.pb.OperationAssignment} returns this
*/
proto.pb.OperationAssignment.prototype.setTruckList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pb.Truck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Truck}
 */
proto.pb.OperationAssignment.prototype.addTruck = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pb.Truck, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.OperationAssignment} returns this
 */
proto.pb.OperationAssignment.prototype.clearTruckList = function() {
  return this.setTruckList([]);
};


/**
 * optional Upload upload = 4;
 * @return {?proto.pb.Upload}
 */
proto.pb.OperationAssignment.prototype.getUpload = function() {
  return /** @type{?proto.pb.Upload} */ (
    jspb.Message.getWrapperField(this, proto_load_pb.Upload, 4));
};


/**
 * @param {?proto.pb.Upload|undefined} value
 * @return {!proto.pb.OperationAssignment} returns this
*/
proto.pb.OperationAssignment.prototype.setUpload = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.OperationAssignment} returns this
 */
proto.pb.OperationAssignment.prototype.clearUpload = function() {
  return this.setUpload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.OperationAssignment.prototype.hasUpload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Download download = 5;
 * @return {?proto.pb.Download}
 */
proto.pb.OperationAssignment.prototype.getDownload = function() {
  return /** @type{?proto.pb.Download} */ (
    jspb.Message.getWrapperField(this, proto_load_pb.Download, 5));
};


/**
 * @param {?proto.pb.Download|undefined} value
 * @return {!proto.pb.OperationAssignment} returns this
*/
proto.pb.OperationAssignment.prototype.setDownload = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.OperationAssignment} returns this
 */
proto.pb.OperationAssignment.prototype.clearDownload = function() {
  return this.setDownload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.OperationAssignment.prototype.hasDownload = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Shift shift = 6;
 * @return {!proto.pb.OperationAssignment.Shift}
 */
proto.pb.OperationAssignment.prototype.getShift = function() {
  return /** @type {!proto.pb.OperationAssignment.Shift} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.pb.OperationAssignment.Shift} value
 * @return {!proto.pb.OperationAssignment} returns this
 */
proto.pb.OperationAssignment.prototype.setShift = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional State state = 7;
 * @return {!proto.pb.OperationAssignment.State}
 */
proto.pb.OperationAssignment.prototype.getState = function() {
  return /** @type {!proto.pb.OperationAssignment.State} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.pb.OperationAssignment.State} value
 * @return {!proto.pb.OperationAssignment} returns this
 */
proto.pb.OperationAssignment.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.TruckInfo.repeatedFields_ = [9,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TruckInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TruckInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TruckInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TruckInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceAlias: jspb.Message.getFieldWithDefault(msg, 2, ""),
    realInterval: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cycleNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sensor: (f = msg.getSensor()) && proto_sensor_pb.Sensor.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 6, 0),
    geofence: (f = msg.getGeofence()) && proto_geofence_pb.Geofence.toObject(includeInstance, f),
    road: (f = msg.getRoad()) && proto_road_pb.Road.toObject(includeInstance, f),
    segmentList: jspb.Message.toObjectList(msg.getSegmentList(),
    proto_point_pb.Point.toObject, includeInstance),
    pit: (f = msg.getPit()) && proto_pit_pb.Pit.toObject(includeInstance, f),
    pad: (f = msg.getPad()) && proto_pad_pb.Pad.toObject(includeInstance, f),
    stock: (f = msg.getStock()) && proto_stock_pb.Stock.toObject(includeInstance, f),
    dme: (f = msg.getDme()) && proto_dme_pb.Dme.toObject(includeInstance, f),
    operationList: jspb.Message.toObjectList(msg.getOperationList(),
    proto.pb.OperationAssignment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TruckInfo}
 */
proto.pb.TruckInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TruckInfo;
  return proto.pb.TruckInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TruckInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TruckInfo}
 */
proto.pb.TruckInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAlias(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRealInterval(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCycleNumber(value);
      break;
    case 5:
      var value = new proto_sensor_pb.Sensor;
      reader.readMessage(value,proto_sensor_pb.Sensor.deserializeBinaryFromReader);
      msg.setSensor(value);
      break;
    case 6:
      var value = /** @type {!proto.pb.TruckInfo.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 7:
      var value = new proto_geofence_pb.Geofence;
      reader.readMessage(value,proto_geofence_pb.Geofence.deserializeBinaryFromReader);
      msg.setGeofence(value);
      break;
    case 8:
      var value = new proto_road_pb.Road;
      reader.readMessage(value,proto_road_pb.Road.deserializeBinaryFromReader);
      msg.setRoad(value);
      break;
    case 9:
      var value = new proto_point_pb.Point;
      reader.readMessage(value,proto_point_pb.Point.deserializeBinaryFromReader);
      msg.addSegment(value);
      break;
    case 10:
      var value = new proto_pit_pb.Pit;
      reader.readMessage(value,proto_pit_pb.Pit.deserializeBinaryFromReader);
      msg.setPit(value);
      break;
    case 11:
      var value = new proto_pad_pb.Pad;
      reader.readMessage(value,proto_pad_pb.Pad.deserializeBinaryFromReader);
      msg.setPad(value);
      break;
    case 12:
      var value = new proto_stock_pb.Stock;
      reader.readMessage(value,proto_stock_pb.Stock.deserializeBinaryFromReader);
      msg.setStock(value);
      break;
    case 13:
      var value = new proto_dme_pb.Dme;
      reader.readMessage(value,proto_dme_pb.Dme.deserializeBinaryFromReader);
      msg.setDme(value);
      break;
    case 14:
      var value = new proto.pb.OperationAssignment;
      reader.readMessage(value,proto.pb.OperationAssignment.deserializeBinaryFromReader);
      msg.addOperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TruckInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TruckInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TruckInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TruckInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceAlias();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRealInterval();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCycleNumber();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSensor();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto_sensor_pb.Sensor.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getGeofence();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto_geofence_pb.Geofence.serializeBinaryToWriter
    );
  }
  f = message.getRoad();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto_road_pb.Road.serializeBinaryToWriter
    );
  }
  f = message.getSegmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto_point_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getPit();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto_pit_pb.Pit.serializeBinaryToWriter
    );
  }
  f = message.getPad();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto_pad_pb.Pad.serializeBinaryToWriter
    );
  }
  f = message.getStock();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto_stock_pb.Stock.serializeBinaryToWriter
    );
  }
  f = message.getDme();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto_dme_pb.Dme.serializeBinaryToWriter
    );
  }
  f = message.getOperationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.pb.OperationAssignment.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.TruckInfo.State = {
  UNKNOWN_STATE: 0,
  UPLOAD: 1,
  DOWNLOAD: 2,
  TO_UPLOAD: 3,
  TO_DOWNLOAD: 4,
  WAITING: 5,
  QUEUE: 6
};

/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.pb.TruckInfo.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_alias = 2;
 * @return {string}
 */
proto.pb.TruckInfo.prototype.getDeviceAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.setDeviceAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 real_interval = 3;
 * @return {number}
 */
proto.pb.TruckInfo.prototype.getRealInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.setRealInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 cycle_number = 4;
 * @return {number}
 */
proto.pb.TruckInfo.prototype.getCycleNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.setCycleNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Sensor sensor = 5;
 * @return {?proto.pb.Sensor}
 */
proto.pb.TruckInfo.prototype.getSensor = function() {
  return /** @type{?proto.pb.Sensor} */ (
    jspb.Message.getWrapperField(this, proto_sensor_pb.Sensor, 5));
};


/**
 * @param {?proto.pb.Sensor|undefined} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setSensor = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearSensor = function() {
  return this.setSensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TruckInfo.prototype.hasSensor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional State state = 6;
 * @return {!proto.pb.TruckInfo.State}
 */
proto.pb.TruckInfo.prototype.getState = function() {
  return /** @type {!proto.pb.TruckInfo.State} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.pb.TruckInfo.State} value
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional Geofence geofence = 7;
 * @return {?proto.pb.Geofence}
 */
proto.pb.TruckInfo.prototype.getGeofence = function() {
  return /** @type{?proto.pb.Geofence} */ (
    jspb.Message.getWrapperField(this, proto_geofence_pb.Geofence, 7));
};


/**
 * @param {?proto.pb.Geofence|undefined} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setGeofence = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearGeofence = function() {
  return this.setGeofence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TruckInfo.prototype.hasGeofence = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Road road = 8;
 * @return {?proto.pb.Road}
 */
proto.pb.TruckInfo.prototype.getRoad = function() {
  return /** @type{?proto.pb.Road} */ (
    jspb.Message.getWrapperField(this, proto_road_pb.Road, 8));
};


/**
 * @param {?proto.pb.Road|undefined} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setRoad = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearRoad = function() {
  return this.setRoad(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TruckInfo.prototype.hasRoad = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated Point segment = 9;
 * @return {!Array<!proto.pb.Point>}
 */
proto.pb.TruckInfo.prototype.getSegmentList = function() {
  return /** @type{!Array<!proto.pb.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_point_pb.Point, 9));
};


/**
 * @param {!Array<!proto.pb.Point>} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setSegmentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.pb.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Point}
 */
proto.pb.TruckInfo.prototype.addSegment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.pb.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearSegmentList = function() {
  return this.setSegmentList([]);
};


/**
 * optional Pit pit = 10;
 * @return {?proto.pb.Pit}
 */
proto.pb.TruckInfo.prototype.getPit = function() {
  return /** @type{?proto.pb.Pit} */ (
    jspb.Message.getWrapperField(this, proto_pit_pb.Pit, 10));
};


/**
 * @param {?proto.pb.Pit|undefined} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setPit = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearPit = function() {
  return this.setPit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TruckInfo.prototype.hasPit = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Pad pad = 11;
 * @return {?proto.pb.Pad}
 */
proto.pb.TruckInfo.prototype.getPad = function() {
  return /** @type{?proto.pb.Pad} */ (
    jspb.Message.getWrapperField(this, proto_pad_pb.Pad, 11));
};


/**
 * @param {?proto.pb.Pad|undefined} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setPad = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearPad = function() {
  return this.setPad(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TruckInfo.prototype.hasPad = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Stock stock = 12;
 * @return {?proto.pb.Stock}
 */
proto.pb.TruckInfo.prototype.getStock = function() {
  return /** @type{?proto.pb.Stock} */ (
    jspb.Message.getWrapperField(this, proto_stock_pb.Stock, 12));
};


/**
 * @param {?proto.pb.Stock|undefined} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setStock = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearStock = function() {
  return this.setStock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TruckInfo.prototype.hasStock = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Dme dme = 13;
 * @return {?proto.pb.Dme}
 */
proto.pb.TruckInfo.prototype.getDme = function() {
  return /** @type{?proto.pb.Dme} */ (
    jspb.Message.getWrapperField(this, proto_dme_pb.Dme, 13));
};


/**
 * @param {?proto.pb.Dme|undefined} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setDme = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearDme = function() {
  return this.setDme(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TruckInfo.prototype.hasDme = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated OperationAssignment operation = 14;
 * @return {!Array<!proto.pb.OperationAssignment>}
 */
proto.pb.TruckInfo.prototype.getOperationList = function() {
  return /** @type{!Array<!proto.pb.OperationAssignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.OperationAssignment, 14));
};


/**
 * @param {!Array<!proto.pb.OperationAssignment>} value
 * @return {!proto.pb.TruckInfo} returns this
*/
proto.pb.TruckInfo.prototype.setOperationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.pb.OperationAssignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.OperationAssignment}
 */
proto.pb.TruckInfo.prototype.addOperation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.pb.OperationAssignment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.TruckInfo} returns this
 */
proto.pb.TruckInfo.prototype.clearOperationList = function() {
  return this.setOperationList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.ExcavatorInfo.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ExcavatorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ExcavatorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ExcavatorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ExcavatorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceAlias: jspb.Message.getFieldWithDefault(msg, 2, ""),
    realInterval: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sensor: (f = msg.getSensor()) && proto_sensor_pb.Sensor.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0),
    geofence: (f = msg.getGeofence()) && proto_geofence_pb.Geofence.toObject(includeInstance, f),
    pit: (f = msg.getPit()) && proto_pit_pb.Pit.toObject(includeInstance, f),
    operationList: jspb.Message.toObjectList(msg.getOperationList(),
    proto.pb.OperationAssignment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ExcavatorInfo}
 */
proto.pb.ExcavatorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ExcavatorInfo;
  return proto.pb.ExcavatorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ExcavatorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ExcavatorInfo}
 */
proto.pb.ExcavatorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceAlias(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRealInterval(value);
      break;
    case 4:
      var value = new proto_sensor_pb.Sensor;
      reader.readMessage(value,proto_sensor_pb.Sensor.deserializeBinaryFromReader);
      msg.setSensor(value);
      break;
    case 5:
      var value = /** @type {!proto.pb.ExcavatorInfo.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 6:
      var value = new proto_geofence_pb.Geofence;
      reader.readMessage(value,proto_geofence_pb.Geofence.deserializeBinaryFromReader);
      msg.setGeofence(value);
      break;
    case 7:
      var value = new proto_pit_pb.Pit;
      reader.readMessage(value,proto_pit_pb.Pit.deserializeBinaryFromReader);
      msg.setPit(value);
      break;
    case 8:
      var value = new proto.pb.OperationAssignment;
      reader.readMessage(value,proto.pb.OperationAssignment.deserializeBinaryFromReader);
      msg.addOperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ExcavatorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ExcavatorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ExcavatorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ExcavatorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceAlias();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRealInterval();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSensor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto_sensor_pb.Sensor.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getGeofence();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto_geofence_pb.Geofence.serializeBinaryToWriter
    );
  }
  f = message.getPit();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto_pit_pb.Pit.serializeBinaryToWriter
    );
  }
  f = message.getOperationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.pb.OperationAssignment.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.pb.ExcavatorInfo.State = {
  UNKNOWN_STATE: 0,
  UPLOAD: 1
};

/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.pb.ExcavatorInfo.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ExcavatorInfo} returns this
 */
proto.pb.ExcavatorInfo.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_alias = 2;
 * @return {string}
 */
proto.pb.ExcavatorInfo.prototype.getDeviceAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.ExcavatorInfo} returns this
 */
proto.pb.ExcavatorInfo.prototype.setDeviceAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 real_interval = 3;
 * @return {number}
 */
proto.pb.ExcavatorInfo.prototype.getRealInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.ExcavatorInfo} returns this
 */
proto.pb.ExcavatorInfo.prototype.setRealInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Sensor sensor = 4;
 * @return {?proto.pb.Sensor}
 */
proto.pb.ExcavatorInfo.prototype.getSensor = function() {
  return /** @type{?proto.pb.Sensor} */ (
    jspb.Message.getWrapperField(this, proto_sensor_pb.Sensor, 4));
};


/**
 * @param {?proto.pb.Sensor|undefined} value
 * @return {!proto.pb.ExcavatorInfo} returns this
*/
proto.pb.ExcavatorInfo.prototype.setSensor = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ExcavatorInfo} returns this
 */
proto.pb.ExcavatorInfo.prototype.clearSensor = function() {
  return this.setSensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ExcavatorInfo.prototype.hasSensor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional State state = 5;
 * @return {!proto.pb.ExcavatorInfo.State}
 */
proto.pb.ExcavatorInfo.prototype.getState = function() {
  return /** @type {!proto.pb.ExcavatorInfo.State} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.pb.ExcavatorInfo.State} value
 * @return {!proto.pb.ExcavatorInfo} returns this
 */
proto.pb.ExcavatorInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Geofence geofence = 6;
 * @return {?proto.pb.Geofence}
 */
proto.pb.ExcavatorInfo.prototype.getGeofence = function() {
  return /** @type{?proto.pb.Geofence} */ (
    jspb.Message.getWrapperField(this, proto_geofence_pb.Geofence, 6));
};


/**
 * @param {?proto.pb.Geofence|undefined} value
 * @return {!proto.pb.ExcavatorInfo} returns this
*/
proto.pb.ExcavatorInfo.prototype.setGeofence = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ExcavatorInfo} returns this
 */
proto.pb.ExcavatorInfo.prototype.clearGeofence = function() {
  return this.setGeofence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ExcavatorInfo.prototype.hasGeofence = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Pit pit = 7;
 * @return {?proto.pb.Pit}
 */
proto.pb.ExcavatorInfo.prototype.getPit = function() {
  return /** @type{?proto.pb.Pit} */ (
    jspb.Message.getWrapperField(this, proto_pit_pb.Pit, 7));
};


/**
 * @param {?proto.pb.Pit|undefined} value
 * @return {!proto.pb.ExcavatorInfo} returns this
*/
proto.pb.ExcavatorInfo.prototype.setPit = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ExcavatorInfo} returns this
 */
proto.pb.ExcavatorInfo.prototype.clearPit = function() {
  return this.setPit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ExcavatorInfo.prototype.hasPit = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated OperationAssignment operation = 8;
 * @return {!Array<!proto.pb.OperationAssignment>}
 */
proto.pb.ExcavatorInfo.prototype.getOperationList = function() {
  return /** @type{!Array<!proto.pb.OperationAssignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.OperationAssignment, 8));
};


/**
 * @param {!Array<!proto.pb.OperationAssignment>} value
 * @return {!proto.pb.ExcavatorInfo} returns this
*/
proto.pb.ExcavatorInfo.prototype.setOperationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.pb.OperationAssignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.OperationAssignment}
 */
proto.pb.ExcavatorInfo.prototype.addOperation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.pb.OperationAssignment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.ExcavatorInfo} returns this
 */
proto.pb.ExcavatorInfo.prototype.clearOperationList = function() {
  return this.setOperationList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TruckInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TruckInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TruckInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TruckInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TruckInfoRequest}
 */
proto.pb.TruckInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TruckInfoRequest;
  return proto.pb.TruckInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TruckInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TruckInfoRequest}
 */
proto.pb.TruckInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TruckInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TruckInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TruckInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TruckInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.TruckInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.TruckInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.TruckInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TruckInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.pb.TruckInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.TruckInfoResponse}
 */
proto.pb.TruckInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.TruckInfoResponse;
  return proto.pb.TruckInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.TruckInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.TruckInfoResponse}
 */
proto.pb.TruckInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.TruckInfo;
      reader.readMessage(value,proto.pb.TruckInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.TruckInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.TruckInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.TruckInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.TruckInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.TruckInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TruckInfo info = 1;
 * @return {?proto.pb.TruckInfo}
 */
proto.pb.TruckInfoResponse.prototype.getInfo = function() {
  return /** @type{?proto.pb.TruckInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.TruckInfo, 1));
};


/**
 * @param {?proto.pb.TruckInfo|undefined} value
 * @return {!proto.pb.TruckInfoResponse} returns this
*/
proto.pb.TruckInfoResponse.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.TruckInfoResponse} returns this
 */
proto.pb.TruckInfoResponse.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.TruckInfoResponse.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ExcavatorInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ExcavatorInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ExcavatorInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ExcavatorInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ExcavatorInfoRequest}
 */
proto.pb.ExcavatorInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ExcavatorInfoRequest;
  return proto.pb.ExcavatorInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ExcavatorInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ExcavatorInfoRequest}
 */
proto.pb.ExcavatorInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ExcavatorInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ExcavatorInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ExcavatorInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ExcavatorInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.ExcavatorInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.ExcavatorInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.ExcavatorInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ExcavatorInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.pb.ExcavatorInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ExcavatorInfoResponse}
 */
proto.pb.ExcavatorInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.ExcavatorInfoResponse;
  return proto.pb.ExcavatorInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ExcavatorInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ExcavatorInfoResponse}
 */
proto.pb.ExcavatorInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.ExcavatorInfo;
      reader.readMessage(value,proto.pb.ExcavatorInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ExcavatorInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.ExcavatorInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.ExcavatorInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.ExcavatorInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pb.ExcavatorInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ExcavatorInfo info = 1;
 * @return {?proto.pb.ExcavatorInfo}
 */
proto.pb.ExcavatorInfoResponse.prototype.getInfo = function() {
  return /** @type{?proto.pb.ExcavatorInfo} */ (
    jspb.Message.getWrapperField(this, proto.pb.ExcavatorInfo, 1));
};


/**
 * @param {?proto.pb.ExcavatorInfo|undefined} value
 * @return {!proto.pb.ExcavatorInfoResponse} returns this
*/
proto.pb.ExcavatorInfoResponse.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pb.ExcavatorInfoResponse} returns this
 */
proto.pb.ExcavatorInfoResponse.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pb.ExcavatorInfoResponse.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.pb);
