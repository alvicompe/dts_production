// source: proto/grid.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_point_pb = require('../proto/point_pb.js');
goog.object.extend(proto, proto_point_pb);
var proto_geofence_pb = require('../proto/geofence_pb.js');
goog.object.extend(proto, proto_geofence_pb);
var proto_road_pb = require('../proto/road_pb.js');
goog.object.extend(proto, proto_road_pb);
var proto_pit_pb = require('../proto/pit_pb.js');
goog.object.extend(proto, proto_pit_pb);
var proto_pad_pb = require('../proto/pad_pb.js');
goog.object.extend(proto, proto_pad_pb);
var proto_stock_pb = require('../proto/stock_pb.js');
goog.object.extend(proto, proto_stock_pb);
var proto_dme_pb = require('../proto/dme_pb.js');
goog.object.extend(proto, proto_dme_pb);
goog.exportSymbol('proto.pb.Grid', null, global);
goog.exportSymbol('proto.pb.GridRequest', null, global);
goog.exportSymbol('proto.pb.GridResponse', null, global);
goog.exportSymbol('proto.pb.Square', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Square = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Square.repeatedFields_, null);
};
goog.inherits(proto.pb.Square, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Square.displayName = 'proto.pb.Square';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.Grid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.Grid.repeatedFields_, null);
};
goog.inherits(proto.pb.Grid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.Grid.displayName = 'proto.pb.Grid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GridRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GridRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GridRequest.displayName = 'proto.pb.GridRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GridResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GridResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pb.GridResponse.displayName = 'proto.pb.GridResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Square.repeatedFields_ = [4,5,6,7,8,9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Square.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Square.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Square} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Square.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    altitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    segmentList: jspb.Message.toObjectList(msg.getSegmentList(),
    proto_point_pb.Point.toObject, includeInstance),
    pointList: jspb.Message.toObjectList(msg.getPointList(),
    proto_point_pb.Point.toObject, includeInstance),
    geofenceList: jspb.Message.toObjectList(msg.getGeofenceList(),
    proto_geofence_pb.Geofence.toObject, includeInstance),
    roadList: jspb.Message.toObjectList(msg.getRoadList(),
    proto_road_pb.Road.toObject, includeInstance),
    pitList: jspb.Message.toObjectList(msg.getPitList(),
    proto_pit_pb.Pit.toObject, includeInstance),
    padList: jspb.Message.toObjectList(msg.getPadList(),
    proto_pad_pb.Pad.toObject, includeInstance),
    stockList: jspb.Message.toObjectList(msg.getStockList(),
    proto_stock_pb.Stock.toObject, includeInstance),
    dmeList: jspb.Message.toObjectList(msg.getDmeList(),
    proto_dme_pb.Dme.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Square}
 */
proto.pb.Square.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Square;
  return proto.pb.Square.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Square} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Square}
 */
proto.pb.Square.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAltitude(value);
      break;
    case 4:
      var value = new proto_point_pb.Point;
      reader.readMessage(value,proto_point_pb.Point.deserializeBinaryFromReader);
      msg.addSegment(value);
      break;
    case 5:
      var value = new proto_point_pb.Point;
      reader.readMessage(value,proto_point_pb.Point.deserializeBinaryFromReader);
      msg.addPoint(value);
      break;
    case 6:
      var value = new proto_geofence_pb.Geofence;
      reader.readMessage(value,proto_geofence_pb.Geofence.deserializeBinaryFromReader);
      msg.addGeofence(value);
      break;
    case 7:
      var value = new proto_road_pb.Road;
      reader.readMessage(value,proto_road_pb.Road.deserializeBinaryFromReader);
      msg.addRoad(value);
      break;
    case 8:
      var value = new proto_pit_pb.Pit;
      reader.readMessage(value,proto_pit_pb.Pit.deserializeBinaryFromReader);
      msg.addPit(value);
      break;
    case 9:
      var value = new proto_pad_pb.Pad;
      reader.readMessage(value,proto_pad_pb.Pad.deserializeBinaryFromReader);
      msg.addPad(value);
      break;
    case 10:
      var value = new proto_stock_pb.Stock;
      reader.readMessage(value,proto_stock_pb.Stock.deserializeBinaryFromReader);
      msg.addStock(value);
      break;
    case 11:
      var value = new proto_dme_pb.Dme;
      reader.readMessage(value,proto_dme_pb.Dme.deserializeBinaryFromReader);
      msg.addDme(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Square.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Square.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Square} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Square.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAltitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getSegmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto_point_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto_point_pb.Point.serializeBinaryToWriter
    );
  }
  f = message.getGeofenceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto_geofence_pb.Geofence.serializeBinaryToWriter
    );
  }
  f = message.getRoadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto_road_pb.Road.serializeBinaryToWriter
    );
  }
  f = message.getPitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto_pit_pb.Pit.serializeBinaryToWriter
    );
  }
  f = message.getPadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto_pad_pb.Pad.serializeBinaryToWriter
    );
  }
  f = message.getStockList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto_stock_pb.Stock.serializeBinaryToWriter
    );
  }
  f = message.getDmeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto_dme_pb.Dme.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pb.Square.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pb.Square.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double altitude = 3;
 * @return {number}
 */
proto.pb.Square.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.setAltitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated Point segment = 4;
 * @return {!Array<!proto.pb.Point>}
 */
proto.pb.Square.prototype.getSegmentList = function() {
  return /** @type{!Array<!proto.pb.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_point_pb.Point, 4));
};


/**
 * @param {!Array<!proto.pb.Point>} value
 * @return {!proto.pb.Square} returns this
*/
proto.pb.Square.prototype.setSegmentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.pb.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Point}
 */
proto.pb.Square.prototype.addSegment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.pb.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.clearSegmentList = function() {
  return this.setSegmentList([]);
};


/**
 * repeated Point point = 5;
 * @return {!Array<!proto.pb.Point>}
 */
proto.pb.Square.prototype.getPointList = function() {
  return /** @type{!Array<!proto.pb.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_point_pb.Point, 5));
};


/**
 * @param {!Array<!proto.pb.Point>} value
 * @return {!proto.pb.Square} returns this
*/
proto.pb.Square.prototype.setPointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pb.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Point}
 */
proto.pb.Square.prototype.addPoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pb.Point, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.clearPointList = function() {
  return this.setPointList([]);
};


/**
 * repeated Geofence geofence = 6;
 * @return {!Array<!proto.pb.Geofence>}
 */
proto.pb.Square.prototype.getGeofenceList = function() {
  return /** @type{!Array<!proto.pb.Geofence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_geofence_pb.Geofence, 6));
};


/**
 * @param {!Array<!proto.pb.Geofence>} value
 * @return {!proto.pb.Square} returns this
*/
proto.pb.Square.prototype.setGeofenceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.pb.Geofence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Geofence}
 */
proto.pb.Square.prototype.addGeofence = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.pb.Geofence, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.clearGeofenceList = function() {
  return this.setGeofenceList([]);
};


/**
 * repeated Road road = 7;
 * @return {!Array<!proto.pb.Road>}
 */
proto.pb.Square.prototype.getRoadList = function() {
  return /** @type{!Array<!proto.pb.Road>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_road_pb.Road, 7));
};


/**
 * @param {!Array<!proto.pb.Road>} value
 * @return {!proto.pb.Square} returns this
*/
proto.pb.Square.prototype.setRoadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.pb.Road=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Road}
 */
proto.pb.Square.prototype.addRoad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.pb.Road, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.clearRoadList = function() {
  return this.setRoadList([]);
};


/**
 * repeated Pit pit = 8;
 * @return {!Array<!proto.pb.Pit>}
 */
proto.pb.Square.prototype.getPitList = function() {
  return /** @type{!Array<!proto.pb.Pit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_pit_pb.Pit, 8));
};


/**
 * @param {!Array<!proto.pb.Pit>} value
 * @return {!proto.pb.Square} returns this
*/
proto.pb.Square.prototype.setPitList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.pb.Pit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Pit}
 */
proto.pb.Square.prototype.addPit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.pb.Pit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.clearPitList = function() {
  return this.setPitList([]);
};


/**
 * repeated Pad pad = 9;
 * @return {!Array<!proto.pb.Pad>}
 */
proto.pb.Square.prototype.getPadList = function() {
  return /** @type{!Array<!proto.pb.Pad>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_pad_pb.Pad, 9));
};


/**
 * @param {!Array<!proto.pb.Pad>} value
 * @return {!proto.pb.Square} returns this
*/
proto.pb.Square.prototype.setPadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.pb.Pad=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Pad}
 */
proto.pb.Square.prototype.addPad = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.pb.Pad, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.clearPadList = function() {
  return this.setPadList([]);
};


/**
 * repeated Stock stock = 10;
 * @return {!Array<!proto.pb.Stock>}
 */
proto.pb.Square.prototype.getStockList = function() {
  return /** @type{!Array<!proto.pb.Stock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_stock_pb.Stock, 10));
};


/**
 * @param {!Array<!proto.pb.Stock>} value
 * @return {!proto.pb.Square} returns this
*/
proto.pb.Square.prototype.setStockList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.pb.Stock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Stock}
 */
proto.pb.Square.prototype.addStock = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.pb.Stock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.clearStockList = function() {
  return this.setStockList([]);
};


/**
 * repeated Dme dme = 11;
 * @return {!Array<!proto.pb.Dme>}
 */
proto.pb.Square.prototype.getDmeList = function() {
  return /** @type{!Array<!proto.pb.Dme>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_dme_pb.Dme, 11));
};


/**
 * @param {!Array<!proto.pb.Dme>} value
 * @return {!proto.pb.Square} returns this
*/
proto.pb.Square.prototype.setDmeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.pb.Dme=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Dme}
 */
proto.pb.Square.prototype.addDme = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.pb.Dme, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Square} returns this
 */
proto.pb.Square.prototype.clearDmeList = function() {
  return this.setDmeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.Grid.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.Grid.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.Grid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.Grid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Grid.toObject = function(includeInstance, msg) {
  var f, obj = {
    squareList: jspb.Message.toObjectList(msg.getSquareList(),
    proto.pb.Square.toObject, includeInstance),
    color: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.Grid}
 */
proto.pb.Grid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.Grid;
  return proto.pb.Grid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.Grid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.Grid}
 */
proto.pb.Grid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pb.Square;
      reader.readMessage(value,proto.pb.Square.deserializeBinaryFromReader);
      msg.addSquare(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.Grid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.Grid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.Grid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.Grid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSquareList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pb.Square.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Square square = 1;
 * @return {!Array<!proto.pb.Square>}
 */
proto.pb.Grid.prototype.getSquareList = function() {
  return /** @type{!Array<!proto.pb.Square>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.Square, 1));
};


/**
 * @param {!Array<!proto.pb.Square>} value
 * @return {!proto.pb.Grid} returns this
*/
proto.pb.Grid.prototype.setSquareList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pb.Square=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pb.Square}
 */
proto.pb.Grid.prototype.addSquare = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pb.Square, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pb.Grid} returns this
 */
proto.pb.Grid.prototype.clearSquareList = function() {
  return this.setSquareList([]);
};


/**
 * optional int32 color = 2;
 * @return {number}
 */
proto.pb.Grid.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pb.Grid} returns this
 */
proto.pb.Grid.prototype.setColor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GridRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GridRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GridRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GridRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    read: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GridRequest}
 */
proto.pb.GridRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GridRequest;
  return proto.pb.GridRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GridRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GridRequest}
 */
proto.pb.GridRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GridRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GridRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GridRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GridRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRead();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool read = 1;
 * @return {boolean}
 */
proto.pb.GridRequest.prototype.getRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.GridRequest} returns this
 */
proto.pb.GridRequest.prototype.setRead = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GridResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GridResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GridResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GridResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    done: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GridResponse}
 */
proto.pb.GridResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GridResponse;
  return proto.pb.GridResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GridResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GridResponse}
 */
proto.pb.GridResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GridResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GridResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GridResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GridResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDone();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool done = 1;
 * @return {boolean}
 */
proto.pb.GridResponse.prototype.getDone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pb.GridResponse} returns this
 */
proto.pb.GridResponse.prototype.setDone = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.pb);
